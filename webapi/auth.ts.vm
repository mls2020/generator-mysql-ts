
import * as express from 'express';
import * as parser from 'body-parser';
import * as crypto from 'crypto';
import { Client } from './db';
import {LoginInfo} from './interfaces';
import {${user.tablename}ConfigDTO} from './interfaces';

interface ${user.tablename} {
    id: number,
    username: string,
    email: string,
    key: string,
    config: string
}

export interface AuthHandler {
    onCreate: (id:number, client:Client) => void;
    onConfig: (id:number, client:Client) => void;
    onResetPassword: (id:number, client:Client) => void;
}

type VerifyFn = (token:string,email:string) =>Promise<{email:string, firstName:string, lastName:string, token:string} | false>;

let sessions: { [hash: string]: LoginInfo } = {};


const CREATE_USER_SQL = "" +
    "CREATE TABLE IF NOT EXISTS `${name}`.`user` (" +
    "  `id` BIGINT(5) UNSIGNED NOT NULL AUTO_INCREMENT," +
    "  `username` VARCHAR(40) NOT NULL," +
    "  `email` VARCHAR(250) NOT NULL," +
    "  `key` VARCHAR(1024) NOT NULL," +
    "  `config` LONGTEXT NULL DEFAULT NULL," +
    "  PRIMARY KEY (`id`)," +
    "  UNIQUE INDEX `ix_username` (`username` ASC)," +
    "  UNIQUE INDEX `ix_email` (`email` ASC))";

const USERTBL = "`${name}`.`${user.tablename}`";

const crypt = (value: string) => crypto.pbkdf2Sync(value, 'salt', 100000, 512, 'sha512').toString('hex');
const getUser = (user: string, pwd: string, db: Client) => {
    const key = crypt(pwd);
    return db.execSQL<User[]>('select * from ' + USERTBL + ' where `username`=? and `key`=?', [user, key]).then(res => {
        return res.data.length == 1 ? res.data[0] : null;
    });
}
const getUserByEmail = (email: string, db: Client) => {
    return db.execSQL<User[]>('select * from ' + USERTBL + ' where `email`=?', [email]).then(res => {
        return res.data.length == 1 ? res.data[0] : null;
    });
}

const createUser = (username: string, pwd: string, email: string, db: Client) => {
    const sql = 'insert into ' + USERTBL + ' (`username`,`email`,`key`) values (?,?,?)';
    return db.execSQL<any>(sql, [username, email, crypt(pwd)]).then(res => {
        return res.data;
    });
}

const listUsers = (db: Client) => {
    const sql = 'select * from ' + USERTBL ';
    return db.execSQL<any>(sql, []).then(res => {
        return res.data.map(u=>{
            return {
                ...u,
                config: JSON.parse(u.config) as userConfigDTO
            }
        });
    });
}


const configUser = (id: number, config: any, db: Client) => {
    const sql = 'update ' + USERTBL + ' set `config` = ? where `id`=?';
    return db.execSQL(sql, [JSON.stringify(config), id]).then(res => {
        return res.data;
    });
}

const resetPassword = (id: number, pwd: string, db: Client) => {
    const key = crypt(pwd);
    const sql = 'update ' + USERTBL + ' set `key` = ? where `id`=?';
    return db.execSQL(sql, [crypt(pwd), id]).then(res => {
        return res.data;
    });
}


export const authParser = (req: express.Request, res: express.Response, next) => {
    if (req.url.indexOf('/api')== 0
            && req.url.indexOf('/api/v${major}/login') != 0
            && req.url.indexOf('/api/v${major}/sys/') != 0)
    {
        const token = req.header("token");
        if (token && sessions[token]) {
            next();
        } else {
            res.status(404).end('Invalid Token');
        }
    } else {
        next();
    }
};

export const applyLogin = (app: express.Application, db: Client, authHandler?: AuthHandler, verifySSO?:VerifyFn) => {
    app.get('/api/v${major}/login', (req, res) => {
     const { user, password } = req.query as any;
        const token = crypt((new Date()).toUTCString());
        getUser(user, password, db).then(usr => {
            if (usr) {
                sessions[token] = {
                    id: usr.id,
                    username: usr.username,
                    loggedDate: (new Date()).toUTCString(),
                    config: usr.config && JSON.parse(usr.config),
                    token,
                    node_env: process.env.NODE_ENV
                }
                res.send(sessions[token]);
            } else {
                res.status(401).send('Invalid User or Password');
            }
        }).catch(err => {
            res.status(551).send(err);
        });
    });

    const getUserFromSSO = async (req: any) => {
        const { email, token } = req.query as any;
        if (!verifySSO) throw Error('verifySSO missing');
        const verifyResult = await verifySSO(token,email);
        if (!verifyResult || verifyResult.email !== email) throw Error('SSO Verification failed');
        const usr = await getUserByEmail(email, db);
        return {
            ...usr,
            token: verifyResult.token,
        };
    }

    app.get('/api/v1/login-sso', async (req, res) => {
        try {
            const usr = await getUserFromSSO(req);
            if (usr) {
                sessions[usr.token] = {
                    id: usr.id,
                    username: usr.username,
                    loggedDate: (new Date()).toUTCString(),
                    config: usr.config && JSON.parse(usr.config),
                    token: usr.token,
                    node_env: process.env.NODE_ENV
                }
                res.send(sessions[usr.token]);
            } else {
                throw Error('Invalid user Email')
            }
        } catch (error) {
            res.status(569).send(error);
        }
    });

    app.post('/api/v${major}/sys/checksystem', (req, res) => {
        db.execSQL(CREATE_USER_SQL)
            .then(data => res.send('ok'))
            .catch(err => res.status(554).send(err));
    })

    app.post('/api/v${major}/sys/createuser', (req, res) => {
        const { username, email, password } = req.body;
        createUser(username, password, email, db).then(data => {
            if ( authHandler) {
                authHandler.onCreate(data.insertId,db);
            }
            res.send(data);
        }).catch(err => res.status(552).send(err));
    })

    app.put('/api/v${major}/sys/configuser', (req, res) => {
        const config = req.body;
        const token = req.header("token");
        const id = token && sessions[token] && sessions[token].id;
        configUser(id, config, db).then(data => {
            if ( authHandler) {
                authHandler.onConfig(id,db);
            }
            res.send(data);
        }).catch(err => res.status(553).send(err));
    })

    app.put('/api/v${major}/sys/resetpassword', (req, res) => {
        const { password } = req.body;
        const token = req.header("token");
        const id = token && sessions[token] && sessions[token].id;
        resetPassword(id, password, db).then(data => {
            if ( authHandler) {
                authHandler.onResetPassword(id,db);
            }
            res.send(data);
        }).catch(err => res.status(553).send(err));
    })
}

